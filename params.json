{"name":"Stack16","tagline":"A simple 16-bit stack machine, designed to be implemented with only 7400-series devices.","body":"stack16\r\n=======\r\n\r\nA simple 16-bit stack machine, designed to be implemented with only 7400-series devices.\r\n\r\nThere are two 16-bit data registers named TOP and NEXT, and an 8-bit instruction register, implemented as flip-flops with clock enable inputs.\r\n\r\nA 16-bit program counter and 15-bit data and return stack pointers are implemented as up/down counters with clock enables. Their values are not directly accessible. On a processor reset (or, for the program counter, on an interrupt), they are loaded from DIP switches.\r\n\r\nMemory access is word-aligned. This is not especially efficient, unless I come up with a clever instruction set encoding that makes procedure calls and integer literals take only one word.\r\n\r\nDuring every microinstruction cycle:\r\n * The address bus is driven by either the TOP register, the program counter, the data stack pointer, or the return stack pointer. \r\n * The data bus is driven by either the program counter, the result of an ALU operation on the TOP and the NEXT registers, or memory. \r\n * Memory may be written to if it is not being read from.\r\n * The TOP register, the NEXT register, the program counter, or the instruction register may be loaded from the data bus.\r\n * One counter may be incremented or decremented.\r\n * The next microstate is loaded into a 4-bit register from microprogram memory.\r\n\r\nA 64K word x 24 bit EEPROM stores the microprogram.\r\n * 4 of the address bits are driven by the present microstate (limiting the length of any instruction to a maximum of 16 cycles).\r\n * 8 are driven by the instruction register.\r\n * 3 are driven by the \"flag\" outputs of the ALU (sign, zero, and carry).\r\n * 1 is driven by the IRQ pin.\r\nThis is not especially efficient, but it minimizes chip count.\r\n\r\nThe simulation requires Mark C. Hansen's Verilog behavioral model of the 74181 4-bit ALU, available [here] <http://web.eecs.umich.edu/~jhayes/iscas.restore/> for research use. If you have curl installed, 'make deps' will automatically download it.","google":"UA-48102494-1","note":"Don't delete this file! It's used internally to help with page regeneration."}